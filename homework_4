#Homework_4 Python

# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной
# платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.


import sys

if len(sys.argv) < 4:
    raise ValueError(f'Ввведите все значения: коллличество часов, ставка, премия')
else:
    hour = int(sys.argv[1])
    bet = int(sys.argv[2])
    prize = int(sys.argv[3])
    result = (hour * bet) + prize
    print(result)

# скрипт
Python\Python_homework_4_1.py 10 1,5 300


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].


my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

result = [my_list[i] for i in range(1, len(my_list)) if my_list[i] > my_list[i + 1]]

print(result)


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.(это скрипт)

result = [a for a in range(20, 241) if ((a % 20 == 0) or (a % 21 ==0))]

print(result)



# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования
# в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]


my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

list_of_num = (a for a in my_list if my_list.count(a) == 1)

print(list_of_num)




# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
# В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить 
# результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().


from functools import reduce 

my_list = [a for a in range(100, 1001) if a % 2 == 0]

print(reduce(lambda a, b: a * b, my_list))


# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, 
# что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.


from intertools import cycle, count

a = 10
my_list = [b for b in range(8)]
counter =count()
cycler = cycle(my_list)

print([next(counter) for b in range(a)])
print([next(cycler) for b in range(a)])



# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). 
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def my_factorial(a):
    b = 1
    for i in range(1, a + 1):
        b *= i
        yield b


 
